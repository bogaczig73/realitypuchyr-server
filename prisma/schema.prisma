generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id                          Int                 @id @default(autoincrement())
  name                        String
  categoryId                  Int                 @map("category_id")
  category                    Category            @relation(fields: [categoryId], references: [id])
  status                      PropertyStatus      @default(ACTIVE)
  ownershipType               OwnershipType
  description                 String?
  city                        String?
  street                      String?
  country                     String?
  language                    String              @default("cs")
  latitude                    Float?
  longitude                   Float?
  virtualTour                 String?
  videoUrl                    String?
  size                        Decimal             @db.Decimal(10, 2)
  beds                        Int?
  baths                       Int?
  layout                      String?
  files                       Json?               @default("[]")
  price                       Decimal             @db.Decimal(10, 2)
  priceHidden                 Boolean             @default(false)
  discountedPrice             Decimal?            @db.Decimal(10, 2)
  buildingStoriesNumber       Int?
  buildingCondition           String?
  apartmentCondition          String?
  aboveGroundFloors           Int?
  reconstructionYearApartment Int?
  reconstructionYearBuilding  Int?
  totalAboveGroundFloors      Int?
  totalUndergroundFloors      Int?
  floorArea                   Decimal?            @db.Decimal(10, 2)
  builtUpArea                 Decimal?            @db.Decimal(10, 2)
  gardenHouseArea             Decimal?            @db.Decimal(10, 2)
  terraceArea                 Decimal?            @db.Decimal(10, 2)
  totalLandArea               Decimal?            @db.Decimal(10, 2)
  gardenArea                  Decimal?            @db.Decimal(10, 2)
  garageArea                  Decimal?            @db.Decimal(10, 2)
  balconyArea                 Decimal?            @db.Decimal(10, 2)
  pergolaArea                 Decimal?            @db.Decimal(10, 2)
  basementArea                Decimal?            @db.Decimal(10, 2)
  workshopArea                Decimal?            @db.Decimal(10, 2)
  totalObjectArea             Decimal?            @db.Decimal(10, 2)
  usableArea                  Decimal?            @db.Decimal(10, 2)
  landArea                    Decimal?            @db.Decimal(10, 2)
  objectType                  String?
  objectLocationType          String?
  houseEquipment              String?
  accessRoad                  String?
  objectCondition             String?
  reservationPrice            String?
  equipmentDescription        String?
  additionalSources           String?
  buildingPermit              String?
  buildability                String?
  utilitiesOnLand             String?
  utilitiesOnAdjacentRoad     String?
  payments                    String?
  brokerId                    String?
  secondaryAgent              String?
  createdAt                   DateTime            @default(now()) @map("created_at")
  updatedAt                   DateTime            @updatedAt @map("updated_at")
  floorplans                  PropertyFloorplan[]
  images                      PropertyImage[]
  reviews                     Review[]
  translations                PropertyTranslation[]

  @@map("properties")
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  isMain     Boolean  @default(false)
  order      Int      @default(0)
  propertyId Int      @map("property_id")
  createdAt  DateTime @default(now()) @map("created_at")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_images")
}

model PropertyFloorplan {
  id         Int      @id @default(autoincrement())
  url        String
  name       String
  propertyId Int      @map("property_id")
  createdAt  DateTime @default(now()) @map("created_at")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_floorplans")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  image       String
  properties  Property[]
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@map("categories")
}

enum PropertyStatus {
  ACTIVE
  SOLD
  RENT
}

enum OwnershipType {
  RENT
  OWNERSHIP
}

model Review {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  rating      Int      // Will store rating from 1-5
  propertyId  Int?     @map("property_id")
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model PropertyTranslation {
  id                    Int      @id @default(autoincrement())
  propertyId           Int      @map("property_id")
  language             String   // e.g., "en", "sk", "cs"
  name                 String
  description          String?
  country              String?
  size                 Decimal?  @db.Decimal(10, 2)
  beds                 String?
  baths                String?
  buildingCondition    String?
  apartmentCondition   String?
  objectType           String?
  objectLocationType   String?
  houseEquipment       String?
  accessRoad           String?
  objectCondition      String?
  equipmentDescription String?
  additionalSources    String?
  buildingPermit       String?
  buildability         String?
  utilitiesOnLand      String?
  utilitiesOnAdjacentRoad String?
  payments             String?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  property             Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, language])
  @@map("property_translations")
}

model Blog {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String   @unique
  content         String   @db.Text
  tags            String[]
  date            DateTime @default(now())
  pictures        String[]
  metaTitle       String?  @map("meta_title")
  metaDescription String?  @map("meta_description") @db.Text
  keywords        String?
  language        String   @default("cs")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  translations    BlogTranslation[]

  @@map("blogs")
}

model BlogTranslation {
  id              Int      @id @default(autoincrement())
  blogId          Int      @map("blog_id")
  language        String   // e.g., "en", "cs", "de"
  name            String
  slug            String   @unique
  content         String   @db.Text
  tags            String[]
  metaTitle       String?  @map("meta_title")
  metaDescription String?  @map("meta_description") @db.Text
  keywords        String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  blog            Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, language])
  @@map("blog_translations")
}

model ContactForm {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  subject     String
  message     String   @db.Text
  phoneNumber String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("contact_forms")
}
